#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of negative words (<0) contained in src.
# Kyeongtak han han00127 5492834.
# Describe how and why you modified the baseline code.
# I used iaddq instead of using bunch of mov insturction to reduce the CPL and one instruction(redundant)
# Unroll loop by 5 to reduce instruction of i++ and jump in loop . 
# I didn't use the mrmovq and rmmovq consecutively to avoid the load/ use hazard. 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
# Loop header
	iaddq  $-6, %rdx        # len -= 6  
	jl     back             # len 1,2,3,4,5,6

Loop:	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r10    # read next val from src
	rmmovq %r8, (%rsi)	# src[i] to dst
	andq   %r8, %r8  	# val > 0?
	jge    front0		# if greater, go to front0 
	iaddq  $1, %rax		# count++
front0:	
	rmmovq %r10, 8(%rsi)    # src[i+1] to dst
	andq   %r10, %r10       # is %r10 <= 0?
	jge    front1		# if so, go to front1
	iaddq  $1, %rax         # count++

front1: 
	mrmovq 16(%rdi), %r8    # src[i+2] to %r8
	mrmovq 24(%rdi), %r10   # src[i+3] to %r10
	rmmovq %r8, 16(%rsi)    # src[i+2] to dst[i+2]
	andq   %r8, %r8         # val > 0? 
	jge    front2            
	iaddq  $1, %rax         # count ++

front2: 
	rmmovq %r10, 24(%rsi)   # src[i+3] to dst
	andq   %r10, %r10       # set CC  
	jge    front3           # if so, go to front3
	iaddq  $1, %rax         # count++ 
	
front3: 
	mrmovq 32(%rdi), %r8    # src[i+4] to %r8
	mrmovq 40(%rdi), %r10   # src[i+5] to %r10
	rmmovq %r8, 32(%rsi)    # src[i+4] to dst[i+4]
	andq   %r8, %r8         # val > 0?
	jge    front4           # if so, go to front 4
	iaddq  $1, %rax         # count++

front4: 
	rmmovq %r10, 40(%rsi)   # src[i+5] to dst
	andq   %r10, %r10       # val > 0?
	jge    Next             # if so, go to Next
	iaddq  $1, %rax         # count++


Next: 
	iaddq $48, %rdi         # start src at [i+6]
	iaddq $48, %rsi         # start dst at [i+6]
	iaddq $-6, %rdx         # len += -6 again
	andq  %rdx, %rdx        # check the len 
	jge   Loop              # if we're not done, going back to unrolling

back:  
	iaddq $6, %rdx          # return len   rest part, len % 6

back0:
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if len less  
	mrmovq (%rdi), %r8      # src[i] to %r8
	mrmovq 8(%rdi), %r10    # src[i +1] to %r10 
	rmmovq %r8, (%rsi)      # src[i] to dst[i]
	andq   %r8, %r8         # set CC with src[i]
	jge    back1            # If ge, goes to back1
	iaddq  $1, %rax         # count++
	
back1: 
	iaddq  $-1, %rdx        # len-- 
	jl     Done             # Done if len less   
	rmmovq %r10, 8(%rsi)    # src [i+1] to dst[i+1]
	andq   %r10, %r10       # set CC with src[i+1] 
	jge    back2            # if ge, go to back2
	iaddq  $1, %rax         # count++ 

back2: 
	iaddq  $-1, %rdx        # len-- 
	jl     Done             # Done if len less  
	mrmovq 16(%rdi), %r8  	# src[i+2] to %r8 
	mrmovq 24(%rdi), %r10   # src[i+3] to %r10
	rmmovq %r8, 16(%rsi)    # src[i+2] to dst[i+2] 
	andq   %r8, %r8         # set CC with src[i+2]  
	jge    back3            # if ge, go to back3
	iaddq  $1, %rax         # count++

back3: 
	iaddq  $-1, %rdx        # len--
	jl     Done	        # Done if len less  
	rmmovq %r10, 24(%rsi)   # src[i+3] to dst[i+3]
	andq   %r10, %r10       # set CC with src[i+3]  
	jge    back4            # if ge, go to back4
	iaddq  $1, %rax 

back4: 
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if len less  
	mrmovq 32(%rdi), %r8    # src[i+4] to %r8 
	rmmovq %r8, 32(%rsi)    # src[i+4] to dst[i+4] 
	andq   %r8, %r8         # set CC with src[i+4] 
	jge    Done             # if ge, goes to Done
	iaddq  $1, %rax         # count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

